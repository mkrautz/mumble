// DO NOT EDIT!
// Auto generated by scripts/protoc-gen-grpcwrapper

namespace MurmurRPC {
namespace Wrapper {
void ServerService_Create_Create(MurmurRPCImpl*, ::MurmurRPC::ServerService::AsyncService*);
void ServerService_Create_Impl(::grpc::ServerContext *context, ::MurmurRPC::Void *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Server > *response, ::boost::function<void()> *next);
void ServerService_Create_Done(MurmurRPCImpl*, ::MurmurRPC::ServerService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::Void *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Server > *out) {
  delete context;
  delete in;
  delete out;
}
void ServerService_Create_Handle(MurmurRPCImpl *impl, ::MurmurRPC::ServerService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::Void *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Server > *out) {
  ServerService_Create_Create(impl, service);
  auto done_fn = ::boost::bind(ServerService_Create_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(ServerService_Create_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void ServerService_Create_Create(MurmurRPCImpl *impl, ::MurmurRPC::ServerService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::Void();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Server >(context);
  auto fn = ::boost::bind(ServerService_Create_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestCreate(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

// Skipping ServerService.Query; streaming not implemented

void ServerService_Get_Create(MurmurRPCImpl*, ::MurmurRPC::ServerService::AsyncService*);
void ServerService_Get_Impl(::grpc::ServerContext *context, ::MurmurRPC::Server *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Server > *response, ::boost::function<void()> *next);
void ServerService_Get_Done(MurmurRPCImpl*, ::MurmurRPC::ServerService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::Server *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Server > *out) {
  delete context;
  delete in;
  delete out;
}
void ServerService_Get_Handle(MurmurRPCImpl *impl, ::MurmurRPC::ServerService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::Server *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Server > *out) {
  ServerService_Get_Create(impl, service);
  auto done_fn = ::boost::bind(ServerService_Get_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(ServerService_Get_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void ServerService_Get_Create(MurmurRPCImpl *impl, ::MurmurRPC::ServerService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::Server();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Server >(context);
  auto fn = ::boost::bind(ServerService_Get_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestGet(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void ServerService_Start_Create(MurmurRPCImpl*, ::MurmurRPC::ServerService::AsyncService*);
void ServerService_Start_Impl(::grpc::ServerContext *context, ::MurmurRPC::Server *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *response, ::boost::function<void()> *next);
void ServerService_Start_Done(MurmurRPCImpl*, ::MurmurRPC::ServerService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::Server *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  delete context;
  delete in;
  delete out;
}
void ServerService_Start_Handle(MurmurRPCImpl *impl, ::MurmurRPC::ServerService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::Server *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  ServerService_Start_Create(impl, service);
  auto done_fn = ::boost::bind(ServerService_Start_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(ServerService_Start_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void ServerService_Start_Create(MurmurRPCImpl *impl, ::MurmurRPC::ServerService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::Server();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void >(context);
  auto fn = ::boost::bind(ServerService_Start_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestStart(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void ServerService_Stop_Create(MurmurRPCImpl*, ::MurmurRPC::ServerService::AsyncService*);
void ServerService_Stop_Impl(::grpc::ServerContext *context, ::MurmurRPC::Server *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *response, ::boost::function<void()> *next);
void ServerService_Stop_Done(MurmurRPCImpl*, ::MurmurRPC::ServerService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::Server *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  delete context;
  delete in;
  delete out;
}
void ServerService_Stop_Handle(MurmurRPCImpl *impl, ::MurmurRPC::ServerService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::Server *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  ServerService_Stop_Create(impl, service);
  auto done_fn = ::boost::bind(ServerService_Stop_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(ServerService_Stop_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void ServerService_Stop_Create(MurmurRPCImpl *impl, ::MurmurRPC::ServerService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::Server();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void >(context);
  auto fn = ::boost::bind(ServerService_Stop_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestStop(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void ServerService_Remove_Create(MurmurRPCImpl*, ::MurmurRPC::ServerService::AsyncService*);
void ServerService_Remove_Impl(::grpc::ServerContext *context, ::MurmurRPC::Server *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *response, ::boost::function<void()> *next);
void ServerService_Remove_Done(MurmurRPCImpl*, ::MurmurRPC::ServerService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::Server *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  delete context;
  delete in;
  delete out;
}
void ServerService_Remove_Handle(MurmurRPCImpl *impl, ::MurmurRPC::ServerService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::Server *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  ServerService_Remove_Create(impl, service);
  auto done_fn = ::boost::bind(ServerService_Remove_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(ServerService_Remove_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void ServerService_Remove_Create(MurmurRPCImpl *impl, ::MurmurRPC::ServerService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::Server();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void >(context);
  auto fn = ::boost::bind(ServerService_Remove_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestRemove(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

// Skipping ServerService.Events; streaming not implemented

void ServerService_Init(MurmurRPCImpl *impl, ::MurmurRPC::ServerService::AsyncService *service) {
  ServerService_Create_Create(impl, service);
  ServerService_Get_Create(impl, service);
  ServerService_Start_Create(impl, service);
  ServerService_Stop_Create(impl, service);
  ServerService_Remove_Create(impl, service);
}


void MetaService_GetUptime_Create(MurmurRPCImpl*, ::MurmurRPC::MetaService::AsyncService*);
void MetaService_GetUptime_Impl(::grpc::ServerContext *context, ::MurmurRPC::Void *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Uptime > *response, ::boost::function<void()> *next);
void MetaService_GetUptime_Done(MurmurRPCImpl*, ::MurmurRPC::MetaService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::Void *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Uptime > *out) {
  delete context;
  delete in;
  delete out;
}
void MetaService_GetUptime_Handle(MurmurRPCImpl *impl, ::MurmurRPC::MetaService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::Void *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Uptime > *out) {
  MetaService_GetUptime_Create(impl, service);
  auto done_fn = ::boost::bind(MetaService_GetUptime_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(MetaService_GetUptime_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void MetaService_GetUptime_Create(MurmurRPCImpl *impl, ::MurmurRPC::MetaService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::Void();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Uptime >(context);
  auto fn = ::boost::bind(MetaService_GetUptime_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestGetUptime(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void MetaService_GetVersion_Create(MurmurRPCImpl*, ::MurmurRPC::MetaService::AsyncService*);
void MetaService_GetVersion_Impl(::grpc::ServerContext *context, ::MurmurRPC::Void *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Version > *response, ::boost::function<void()> *next);
void MetaService_GetVersion_Done(MurmurRPCImpl*, ::MurmurRPC::MetaService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::Void *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Version > *out) {
  delete context;
  delete in;
  delete out;
}
void MetaService_GetVersion_Handle(MurmurRPCImpl *impl, ::MurmurRPC::MetaService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::Void *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Version > *out) {
  MetaService_GetVersion_Create(impl, service);
  auto done_fn = ::boost::bind(MetaService_GetVersion_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(MetaService_GetVersion_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void MetaService_GetVersion_Create(MurmurRPCImpl *impl, ::MurmurRPC::MetaService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::Void();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Version >(context);
  auto fn = ::boost::bind(MetaService_GetVersion_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestGetVersion(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

// Skipping MetaService.Events; streaming not implemented

void MetaService_Init(MurmurRPCImpl *impl, ::MurmurRPC::MetaService::AsyncService *service) {
  MetaService_GetUptime_Create(impl, service);
  MetaService_GetVersion_Create(impl, service);
}


void ContextActionService_Add_Create(MurmurRPCImpl*, ::MurmurRPC::ContextActionService::AsyncService*);
void ContextActionService_Add_Impl(::grpc::ServerContext *context, ::MurmurRPC::ContextAction *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *response, ::boost::function<void()> *next);
void ContextActionService_Add_Done(MurmurRPCImpl*, ::MurmurRPC::ContextActionService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::ContextAction *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  delete context;
  delete in;
  delete out;
}
void ContextActionService_Add_Handle(MurmurRPCImpl *impl, ::MurmurRPC::ContextActionService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::ContextAction *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  ContextActionService_Add_Create(impl, service);
  auto done_fn = ::boost::bind(ContextActionService_Add_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(ContextActionService_Add_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void ContextActionService_Add_Create(MurmurRPCImpl *impl, ::MurmurRPC::ContextActionService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::ContextAction();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void >(context);
  auto fn = ::boost::bind(ContextActionService_Add_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestAdd(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void ContextActionService_Remove_Create(MurmurRPCImpl*, ::MurmurRPC::ContextActionService::AsyncService*);
void ContextActionService_Remove_Impl(::grpc::ServerContext *context, ::MurmurRPC::ContextAction *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *response, ::boost::function<void()> *next);
void ContextActionService_Remove_Done(MurmurRPCImpl*, ::MurmurRPC::ContextActionService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::ContextAction *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  delete context;
  delete in;
  delete out;
}
void ContextActionService_Remove_Handle(MurmurRPCImpl *impl, ::MurmurRPC::ContextActionService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::ContextAction *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  ContextActionService_Remove_Create(impl, service);
  auto done_fn = ::boost::bind(ContextActionService_Remove_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(ContextActionService_Remove_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void ContextActionService_Remove_Create(MurmurRPCImpl *impl, ::MurmurRPC::ContextActionService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::ContextAction();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void >(context);
  auto fn = ::boost::bind(ContextActionService_Remove_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestRemove(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

// Skipping ContextActionService.Events; streaming not implemented

void ContextActionService_Init(MurmurRPCImpl *impl, ::MurmurRPC::ContextActionService::AsyncService *service) {
  ContextActionService_Add_Create(impl, service);
  ContextActionService_Remove_Create(impl, service);
}


void TextMessageService_Send_Create(MurmurRPCImpl*, ::MurmurRPC::TextMessageService::AsyncService*);
void TextMessageService_Send_Impl(::grpc::ServerContext *context, ::MurmurRPC::TextMessage *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *response, ::boost::function<void()> *next);
void TextMessageService_Send_Done(MurmurRPCImpl*, ::MurmurRPC::TextMessageService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::TextMessage *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  delete context;
  delete in;
  delete out;
}
void TextMessageService_Send_Handle(MurmurRPCImpl *impl, ::MurmurRPC::TextMessageService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::TextMessage *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  TextMessageService_Send_Create(impl, service);
  auto done_fn = ::boost::bind(TextMessageService_Send_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(TextMessageService_Send_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void TextMessageService_Send_Create(MurmurRPCImpl *impl, ::MurmurRPC::TextMessageService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::TextMessage();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void >(context);
  auto fn = ::boost::bind(TextMessageService_Send_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestSend(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void TextMessageService_Init(MurmurRPCImpl *impl, ::MurmurRPC::TextMessageService::AsyncService *service) {
  TextMessageService_Send_Create(impl, service);
}


// Skipping LogService.Query; streaming not implemented

void LogService_Init(MurmurRPCImpl *impl, ::MurmurRPC::LogService::AsyncService *service) {
}


void ConfigService_GetDefault_Create(MurmurRPCImpl*, ::MurmurRPC::ConfigService::AsyncService*);
void ConfigService_GetDefault_Impl(::grpc::ServerContext *context, ::MurmurRPC::Void *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Config > *response, ::boost::function<void()> *next);
void ConfigService_GetDefault_Done(MurmurRPCImpl*, ::MurmurRPC::ConfigService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::Void *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Config > *out) {
  delete context;
  delete in;
  delete out;
}
void ConfigService_GetDefault_Handle(MurmurRPCImpl *impl, ::MurmurRPC::ConfigService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::Void *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Config > *out) {
  ConfigService_GetDefault_Create(impl, service);
  auto done_fn = ::boost::bind(ConfigService_GetDefault_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(ConfigService_GetDefault_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void ConfigService_GetDefault_Create(MurmurRPCImpl *impl, ::MurmurRPC::ConfigService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::Void();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Config >(context);
  auto fn = ::boost::bind(ConfigService_GetDefault_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestGetDefault(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void ConfigService_SetDefault_Create(MurmurRPCImpl*, ::MurmurRPC::ConfigService::AsyncService*);
void ConfigService_SetDefault_Impl(::grpc::ServerContext *context, ::MurmurRPC::Config *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *response, ::boost::function<void()> *next);
void ConfigService_SetDefault_Done(MurmurRPCImpl*, ::MurmurRPC::ConfigService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::Config *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  delete context;
  delete in;
  delete out;
}
void ConfigService_SetDefault_Handle(MurmurRPCImpl *impl, ::MurmurRPC::ConfigService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::Config *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  ConfigService_SetDefault_Create(impl, service);
  auto done_fn = ::boost::bind(ConfigService_SetDefault_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(ConfigService_SetDefault_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void ConfigService_SetDefault_Create(MurmurRPCImpl *impl, ::MurmurRPC::ConfigService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::Config();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void >(context);
  auto fn = ::boost::bind(ConfigService_SetDefault_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestSetDefault(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void ConfigService_Query_Create(MurmurRPCImpl*, ::MurmurRPC::ConfigService::AsyncService*);
void ConfigService_Query_Impl(::grpc::ServerContext *context, ::MurmurRPC::Config::Query *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Config > *response, ::boost::function<void()> *next);
void ConfigService_Query_Done(MurmurRPCImpl*, ::MurmurRPC::ConfigService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::Config::Query *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Config > *out) {
  delete context;
  delete in;
  delete out;
}
void ConfigService_Query_Handle(MurmurRPCImpl *impl, ::MurmurRPC::ConfigService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::Config::Query *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Config > *out) {
  ConfigService_Query_Create(impl, service);
  auto done_fn = ::boost::bind(ConfigService_Query_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(ConfigService_Query_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void ConfigService_Query_Create(MurmurRPCImpl *impl, ::MurmurRPC::ConfigService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::Config::Query();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Config >(context);
  auto fn = ::boost::bind(ConfigService_Query_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestQuery(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void ConfigService_Init(MurmurRPCImpl *impl, ::MurmurRPC::ConfigService::AsyncService *service) {
  ConfigService_GetDefault_Create(impl, service);
  ConfigService_SetDefault_Create(impl, service);
  ConfigService_Query_Create(impl, service);
}


// Skipping ChannelService.Query; streaming not implemented

void ChannelService_Get_Create(MurmurRPCImpl*, ::MurmurRPC::ChannelService::AsyncService*);
void ChannelService_Get_Impl(::grpc::ServerContext *context, ::MurmurRPC::Channel *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Channel > *response, ::boost::function<void()> *next);
void ChannelService_Get_Done(MurmurRPCImpl*, ::MurmurRPC::ChannelService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::Channel *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Channel > *out) {
  delete context;
  delete in;
  delete out;
}
void ChannelService_Get_Handle(MurmurRPCImpl *impl, ::MurmurRPC::ChannelService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::Channel *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Channel > *out) {
  ChannelService_Get_Create(impl, service);
  auto done_fn = ::boost::bind(ChannelService_Get_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(ChannelService_Get_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void ChannelService_Get_Create(MurmurRPCImpl *impl, ::MurmurRPC::ChannelService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::Channel();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Channel >(context);
  auto fn = ::boost::bind(ChannelService_Get_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestGet(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void ChannelService_Add_Create(MurmurRPCImpl*, ::MurmurRPC::ChannelService::AsyncService*);
void ChannelService_Add_Impl(::grpc::ServerContext *context, ::MurmurRPC::Channel *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Channel > *response, ::boost::function<void()> *next);
void ChannelService_Add_Done(MurmurRPCImpl*, ::MurmurRPC::ChannelService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::Channel *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Channel > *out) {
  delete context;
  delete in;
  delete out;
}
void ChannelService_Add_Handle(MurmurRPCImpl *impl, ::MurmurRPC::ChannelService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::Channel *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Channel > *out) {
  ChannelService_Add_Create(impl, service);
  auto done_fn = ::boost::bind(ChannelService_Add_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(ChannelService_Add_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void ChannelService_Add_Create(MurmurRPCImpl *impl, ::MurmurRPC::ChannelService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::Channel();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Channel >(context);
  auto fn = ::boost::bind(ChannelService_Add_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestAdd(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void ChannelService_Remove_Create(MurmurRPCImpl*, ::MurmurRPC::ChannelService::AsyncService*);
void ChannelService_Remove_Impl(::grpc::ServerContext *context, ::MurmurRPC::Channel *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *response, ::boost::function<void()> *next);
void ChannelService_Remove_Done(MurmurRPCImpl*, ::MurmurRPC::ChannelService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::Channel *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  delete context;
  delete in;
  delete out;
}
void ChannelService_Remove_Handle(MurmurRPCImpl *impl, ::MurmurRPC::ChannelService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::Channel *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  ChannelService_Remove_Create(impl, service);
  auto done_fn = ::boost::bind(ChannelService_Remove_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(ChannelService_Remove_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void ChannelService_Remove_Create(MurmurRPCImpl *impl, ::MurmurRPC::ChannelService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::Channel();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void >(context);
  auto fn = ::boost::bind(ChannelService_Remove_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestRemove(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void ChannelService_Update_Create(MurmurRPCImpl*, ::MurmurRPC::ChannelService::AsyncService*);
void ChannelService_Update_Impl(::grpc::ServerContext *context, ::MurmurRPC::Channel *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Channel > *response, ::boost::function<void()> *next);
void ChannelService_Update_Done(MurmurRPCImpl*, ::MurmurRPC::ChannelService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::Channel *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Channel > *out) {
  delete context;
  delete in;
  delete out;
}
void ChannelService_Update_Handle(MurmurRPCImpl *impl, ::MurmurRPC::ChannelService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::Channel *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Channel > *out) {
  ChannelService_Update_Create(impl, service);
  auto done_fn = ::boost::bind(ChannelService_Update_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(ChannelService_Update_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void ChannelService_Update_Create(MurmurRPCImpl *impl, ::MurmurRPC::ChannelService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::Channel();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Channel >(context);
  auto fn = ::boost::bind(ChannelService_Update_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestUpdate(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void ChannelService_Init(MurmurRPCImpl *impl, ::MurmurRPC::ChannelService::AsyncService *service) {
  ChannelService_Get_Create(impl, service);
  ChannelService_Add_Create(impl, service);
  ChannelService_Remove_Create(impl, service);
  ChannelService_Update_Create(impl, service);
}


// Skipping UserService.Query; streaming not implemented

void UserService_Get_Create(MurmurRPCImpl*, ::MurmurRPC::UserService::AsyncService*);
void UserService_Get_Impl(::grpc::ServerContext *context, ::MurmurRPC::User *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::User > *response, ::boost::function<void()> *next);
void UserService_Get_Done(MurmurRPCImpl*, ::MurmurRPC::UserService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::User *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::User > *out) {
  delete context;
  delete in;
  delete out;
}
void UserService_Get_Handle(MurmurRPCImpl *impl, ::MurmurRPC::UserService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::User *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::User > *out) {
  UserService_Get_Create(impl, service);
  auto done_fn = ::boost::bind(UserService_Get_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(UserService_Get_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void UserService_Get_Create(MurmurRPCImpl *impl, ::MurmurRPC::UserService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::User();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::User >(context);
  auto fn = ::boost::bind(UserService_Get_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestGet(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void UserService_Update_Create(MurmurRPCImpl*, ::MurmurRPC::UserService::AsyncService*);
void UserService_Update_Impl(::grpc::ServerContext *context, ::MurmurRPC::User *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::User > *response, ::boost::function<void()> *next);
void UserService_Update_Done(MurmurRPCImpl*, ::MurmurRPC::UserService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::User *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::User > *out) {
  delete context;
  delete in;
  delete out;
}
void UserService_Update_Handle(MurmurRPCImpl *impl, ::MurmurRPC::UserService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::User *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::User > *out) {
  UserService_Update_Create(impl, service);
  auto done_fn = ::boost::bind(UserService_Update_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(UserService_Update_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void UserService_Update_Create(MurmurRPCImpl *impl, ::MurmurRPC::UserService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::User();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::User >(context);
  auto fn = ::boost::bind(UserService_Update_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestUpdate(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void UserService_Kick_Create(MurmurRPCImpl*, ::MurmurRPC::UserService::AsyncService*);
void UserService_Kick_Impl(::grpc::ServerContext *context, ::MurmurRPC::User::Kick *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *response, ::boost::function<void()> *next);
void UserService_Kick_Done(MurmurRPCImpl*, ::MurmurRPC::UserService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::User::Kick *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  delete context;
  delete in;
  delete out;
}
void UserService_Kick_Handle(MurmurRPCImpl *impl, ::MurmurRPC::UserService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::User::Kick *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  UserService_Kick_Create(impl, service);
  auto done_fn = ::boost::bind(UserService_Kick_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(UserService_Kick_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void UserService_Kick_Create(MurmurRPCImpl *impl, ::MurmurRPC::UserService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::User::Kick();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void >(context);
  auto fn = ::boost::bind(UserService_Kick_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestKick(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void UserService_Init(MurmurRPCImpl *impl, ::MurmurRPC::UserService::AsyncService *service) {
  UserService_Get_Create(impl, service);
  UserService_Update_Create(impl, service);
  UserService_Kick_Create(impl, service);
}


void TreeService_Get_Create(MurmurRPCImpl*, ::MurmurRPC::TreeService::AsyncService*);
void TreeService_Get_Impl(::grpc::ServerContext *context, ::MurmurRPC::Tree *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Tree > *response, ::boost::function<void()> *next);
void TreeService_Get_Done(MurmurRPCImpl*, ::MurmurRPC::TreeService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::Tree *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Tree > *out) {
  delete context;
  delete in;
  delete out;
}
void TreeService_Get_Handle(MurmurRPCImpl *impl, ::MurmurRPC::TreeService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::Tree *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Tree > *out) {
  TreeService_Get_Create(impl, service);
  auto done_fn = ::boost::bind(TreeService_Get_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(TreeService_Get_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void TreeService_Get_Create(MurmurRPCImpl *impl, ::MurmurRPC::TreeService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::Tree();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Tree >(context);
  auto fn = ::boost::bind(TreeService_Get_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestGet(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void TreeService_Init(MurmurRPCImpl *impl, ::MurmurRPC::TreeService::AsyncService *service) {
  TreeService_Get_Create(impl, service);
}


// Skipping BanService.Get; streaming not implemented

// Skipping BanService.Set; streaming not implemented

void BanService_Init(MurmurRPCImpl *impl, ::MurmurRPC::BanService::AsyncService *service) {
}


void ACLService_Get_Create(MurmurRPCImpl*, ::MurmurRPC::ACLService::AsyncService*);
void ACLService_Get_Impl(::grpc::ServerContext *context, ::MurmurRPC::Channel *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::ACL::List > *response, ::boost::function<void()> *next);
void ACLService_Get_Done(MurmurRPCImpl*, ::MurmurRPC::ACLService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::Channel *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::ACL::List > *out) {
  delete context;
  delete in;
  delete out;
}
void ACLService_Get_Handle(MurmurRPCImpl *impl, ::MurmurRPC::ACLService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::Channel *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::ACL::List > *out) {
  ACLService_Get_Create(impl, service);
  auto done_fn = ::boost::bind(ACLService_Get_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(ACLService_Get_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void ACLService_Get_Create(MurmurRPCImpl *impl, ::MurmurRPC::ACLService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::Channel();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::ACL::List >(context);
  auto fn = ::boost::bind(ACLService_Get_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestGet(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void ACLService_Set_Create(MurmurRPCImpl*, ::MurmurRPC::ACLService::AsyncService*);
void ACLService_Set_Impl(::grpc::ServerContext *context, ::MurmurRPC::ACL::List *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *response, ::boost::function<void()> *next);
void ACLService_Set_Done(MurmurRPCImpl*, ::MurmurRPC::ACLService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::ACL::List *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  delete context;
  delete in;
  delete out;
}
void ACLService_Set_Handle(MurmurRPCImpl *impl, ::MurmurRPC::ACLService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::ACL::List *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  ACLService_Set_Create(impl, service);
  auto done_fn = ::boost::bind(ACLService_Set_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(ACLService_Set_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void ACLService_Set_Create(MurmurRPCImpl *impl, ::MurmurRPC::ACLService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::ACL::List();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void >(context);
  auto fn = ::boost::bind(ACLService_Set_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestSet(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void ACLService_GetEffectivePermissions_Create(MurmurRPCImpl*, ::MurmurRPC::ACLService::AsyncService*);
void ACLService_GetEffectivePermissions_Impl(::grpc::ServerContext *context, ::MurmurRPC::User *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::ACL > *response, ::boost::function<void()> *next);
void ACLService_GetEffectivePermissions_Done(MurmurRPCImpl*, ::MurmurRPC::ACLService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::User *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::ACL > *out) {
  delete context;
  delete in;
  delete out;
}
void ACLService_GetEffectivePermissions_Handle(MurmurRPCImpl *impl, ::MurmurRPC::ACLService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::User *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::ACL > *out) {
  ACLService_GetEffectivePermissions_Create(impl, service);
  auto done_fn = ::boost::bind(ACLService_GetEffectivePermissions_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(ACLService_GetEffectivePermissions_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void ACLService_GetEffectivePermissions_Create(MurmurRPCImpl *impl, ::MurmurRPC::ACLService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::User();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::ACL >(context);
  auto fn = ::boost::bind(ACLService_GetEffectivePermissions_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestGetEffectivePermissions(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void ACLService_AddTemporaryGroup_Create(MurmurRPCImpl*, ::MurmurRPC::ACLService::AsyncService*);
void ACLService_AddTemporaryGroup_Impl(::grpc::ServerContext *context, ::MurmurRPC::ACL::TemporaryGroup *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *response, ::boost::function<void()> *next);
void ACLService_AddTemporaryGroup_Done(MurmurRPCImpl*, ::MurmurRPC::ACLService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::ACL::TemporaryGroup *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  delete context;
  delete in;
  delete out;
}
void ACLService_AddTemporaryGroup_Handle(MurmurRPCImpl *impl, ::MurmurRPC::ACLService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::ACL::TemporaryGroup *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  ACLService_AddTemporaryGroup_Create(impl, service);
  auto done_fn = ::boost::bind(ACLService_AddTemporaryGroup_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(ACLService_AddTemporaryGroup_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void ACLService_AddTemporaryGroup_Create(MurmurRPCImpl *impl, ::MurmurRPC::ACLService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::ACL::TemporaryGroup();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void >(context);
  auto fn = ::boost::bind(ACLService_AddTemporaryGroup_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestAddTemporaryGroup(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void ACLService_RemoveTemporaryGroup_Create(MurmurRPCImpl*, ::MurmurRPC::ACLService::AsyncService*);
void ACLService_RemoveTemporaryGroup_Impl(::grpc::ServerContext *context, ::MurmurRPC::ACL::TemporaryGroup *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *response, ::boost::function<void()> *next);
void ACLService_RemoveTemporaryGroup_Done(MurmurRPCImpl*, ::MurmurRPC::ACLService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::ACL::TemporaryGroup *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  delete context;
  delete in;
  delete out;
}
void ACLService_RemoveTemporaryGroup_Handle(MurmurRPCImpl *impl, ::MurmurRPC::ACLService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::ACL::TemporaryGroup *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  ACLService_RemoveTemporaryGroup_Create(impl, service);
  auto done_fn = ::boost::bind(ACLService_RemoveTemporaryGroup_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(ACLService_RemoveTemporaryGroup_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void ACLService_RemoveTemporaryGroup_Create(MurmurRPCImpl *impl, ::MurmurRPC::ACLService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::ACL::TemporaryGroup();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void >(context);
  auto fn = ::boost::bind(ACLService_RemoveTemporaryGroup_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestRemoveTemporaryGroup(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void ACLService_Init(MurmurRPCImpl *impl, ::MurmurRPC::ACLService::AsyncService *service) {
  ACLService_Get_Create(impl, service);
  ACLService_Set_Create(impl, service);
  ACLService_GetEffectivePermissions_Create(impl, service);
  ACLService_AddTemporaryGroup_Create(impl, service);
  ACLService_RemoveTemporaryGroup_Create(impl, service);
}


// Skipping AuthenticatorService.Stream; streaming not implemented

// Skipping AuthenticatorService.RegistrationStream; streaming not implemented

void AuthenticatorService_Init(MurmurRPCImpl *impl, ::MurmurRPC::AuthenticatorService::AsyncService *service) {
}


// Skipping DatabaseService.Query; streaming not implemented

void DatabaseService_Get_Create(MurmurRPCImpl*, ::MurmurRPC::DatabaseService::AsyncService*);
void DatabaseService_Get_Impl(::grpc::ServerContext *context, ::MurmurRPC::Database::User *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Database::User > *response, ::boost::function<void()> *next);
void DatabaseService_Get_Done(MurmurRPCImpl*, ::MurmurRPC::DatabaseService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::Database::User *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Database::User > *out) {
  delete context;
  delete in;
  delete out;
}
void DatabaseService_Get_Handle(MurmurRPCImpl *impl, ::MurmurRPC::DatabaseService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::Database::User *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Database::User > *out) {
  DatabaseService_Get_Create(impl, service);
  auto done_fn = ::boost::bind(DatabaseService_Get_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(DatabaseService_Get_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void DatabaseService_Get_Create(MurmurRPCImpl *impl, ::MurmurRPC::DatabaseService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::Database::User();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Database::User >(context);
  auto fn = ::boost::bind(DatabaseService_Get_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestGet(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void DatabaseService_Update_Create(MurmurRPCImpl*, ::MurmurRPC::DatabaseService::AsyncService*);
void DatabaseService_Update_Impl(::grpc::ServerContext *context, ::MurmurRPC::Database::User *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Database::User > *response, ::boost::function<void()> *next);
void DatabaseService_Update_Done(MurmurRPCImpl*, ::MurmurRPC::DatabaseService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::Database::User *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Database::User > *out) {
  delete context;
  delete in;
  delete out;
}
void DatabaseService_Update_Handle(MurmurRPCImpl *impl, ::MurmurRPC::DatabaseService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::Database::User *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Database::User > *out) {
  DatabaseService_Update_Create(impl, service);
  auto done_fn = ::boost::bind(DatabaseService_Update_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(DatabaseService_Update_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void DatabaseService_Update_Create(MurmurRPCImpl *impl, ::MurmurRPC::DatabaseService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::Database::User();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Database::User >(context);
  auto fn = ::boost::bind(DatabaseService_Update_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestUpdate(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void DatabaseService_Register_Create(MurmurRPCImpl*, ::MurmurRPC::DatabaseService::AsyncService*);
void DatabaseService_Register_Impl(::grpc::ServerContext *context, ::MurmurRPC::Database::User *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Database::User > *response, ::boost::function<void()> *next);
void DatabaseService_Register_Done(MurmurRPCImpl*, ::MurmurRPC::DatabaseService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::Database::User *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Database::User > *out) {
  delete context;
  delete in;
  delete out;
}
void DatabaseService_Register_Handle(MurmurRPCImpl *impl, ::MurmurRPC::DatabaseService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::Database::User *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Database::User > *out) {
  DatabaseService_Register_Create(impl, service);
  auto done_fn = ::boost::bind(DatabaseService_Register_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(DatabaseService_Register_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void DatabaseService_Register_Create(MurmurRPCImpl *impl, ::MurmurRPC::DatabaseService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::Database::User();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Database::User >(context);
  auto fn = ::boost::bind(DatabaseService_Register_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestRegister(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void DatabaseService_Deregister_Create(MurmurRPCImpl*, ::MurmurRPC::DatabaseService::AsyncService*);
void DatabaseService_Deregister_Impl(::grpc::ServerContext *context, ::MurmurRPC::Database::User *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *response, ::boost::function<void()> *next);
void DatabaseService_Deregister_Done(MurmurRPCImpl*, ::MurmurRPC::DatabaseService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::Database::User *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  delete context;
  delete in;
  delete out;
}
void DatabaseService_Deregister_Handle(MurmurRPCImpl *impl, ::MurmurRPC::DatabaseService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::Database::User *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  DatabaseService_Deregister_Create(impl, service);
  auto done_fn = ::boost::bind(DatabaseService_Deregister_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(DatabaseService_Deregister_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void DatabaseService_Deregister_Create(MurmurRPCImpl *impl, ::MurmurRPC::DatabaseService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::Database::User();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void >(context);
  auto fn = ::boost::bind(DatabaseService_Deregister_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestDeregister(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void DatabaseService_VerifyPassword_Create(MurmurRPCImpl*, ::MurmurRPC::DatabaseService::AsyncService*);
void DatabaseService_VerifyPassword_Impl(::grpc::ServerContext *context, ::MurmurRPC::Database::VerifyPassword *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Database::User > *response, ::boost::function<void()> *next);
void DatabaseService_VerifyPassword_Done(MurmurRPCImpl*, ::MurmurRPC::DatabaseService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::Database::VerifyPassword *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Database::User > *out) {
  delete context;
  delete in;
  delete out;
}
void DatabaseService_VerifyPassword_Handle(MurmurRPCImpl *impl, ::MurmurRPC::DatabaseService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::Database::VerifyPassword *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Database::User > *out) {
  DatabaseService_VerifyPassword_Create(impl, service);
  auto done_fn = ::boost::bind(DatabaseService_VerifyPassword_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(DatabaseService_VerifyPassword_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void DatabaseService_VerifyPassword_Create(MurmurRPCImpl *impl, ::MurmurRPC::DatabaseService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::Database::VerifyPassword();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Database::User >(context);
  auto fn = ::boost::bind(DatabaseService_VerifyPassword_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestVerifyPassword(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void DatabaseService_Init(MurmurRPCImpl *impl, ::MurmurRPC::DatabaseService::AsyncService *service) {
  DatabaseService_Get_Create(impl, service);
  DatabaseService_Update_Create(impl, service);
  DatabaseService_Register_Create(impl, service);
  DatabaseService_Deregister_Create(impl, service);
  DatabaseService_VerifyPassword_Create(impl, service);
}


void AudioService_SetRedirectWhisperGroup_Create(MurmurRPCImpl*, ::MurmurRPC::AudioService::AsyncService*);
void AudioService_SetRedirectWhisperGroup_Impl(::grpc::ServerContext *context, ::MurmurRPC::RedirectWhisperGroup *request, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *response, ::boost::function<void()> *next);
void AudioService_SetRedirectWhisperGroup_Done(MurmurRPCImpl*, ::MurmurRPC::AudioService::AsyncService*, ::grpc::ServerContext *context, ::MurmurRPC::RedirectWhisperGroup *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  delete context;
  delete in;
  delete out;
}
void AudioService_SetRedirectWhisperGroup_Handle(MurmurRPCImpl *impl, ::MurmurRPC::AudioService::AsyncService *service, ::grpc::ServerContext *context, ::MurmurRPC::RedirectWhisperGroup *in, ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void > *out) {
  AudioService_SetRedirectWhisperGroup_Create(impl, service);
  auto done_fn = ::boost::bind(AudioService_SetRedirectWhisperGroup_Done, impl, service, context, in, out);
  auto done_fn_ptr = new ::boost::function<void()>(done_fn);
  auto ie = new ExecEvent(::boost::bind(AudioService_SetRedirectWhisperGroup_Impl, context, in, out, done_fn_ptr));
  QCoreApplication::instance()->postEvent(impl, ie);
}
void AudioService_SetRedirectWhisperGroup_Create(MurmurRPCImpl *impl, ::MurmurRPC::AudioService::AsyncService *service) {
  auto context = new ::grpc::ServerContext();
  auto request = new ::MurmurRPC::RedirectWhisperGroup();
  auto response = new ::grpc::ServerAsyncResponseWriter< ::MurmurRPC::Void >(context);
  auto fn = ::boost::bind(AudioService_SetRedirectWhisperGroup_Handle, impl, service, context, request, response);
  auto fn_ptr = new ::boost::function<void()>(fn);
  service->RequestSetRedirectWhisperGroup(context, request, response, impl->mCQ.get(), impl->mCQ.get(), fn_ptr);
}

void AudioService_Init(MurmurRPCImpl *impl, ::MurmurRPC::AudioService::AsyncService *service) {
  AudioService_SetRedirectWhisperGroup_Create(impl, service);
}

}
}
